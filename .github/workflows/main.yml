name: CI

on:
  pull_request:
    branches:
      - master

jobs:
  run:
    name: Build, lint and test

    runs-on: ubuntu-latest

    steps:
    - name: Checkout 
      uses: actions/checkout@v3 
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Create secrets
      run: |
        chmod +x make_secrets.sh
        ./make_secrets.sh

    - name: Build and start containers
      run: docker compose up -d --build

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install Node dependencies
      run: cd ./frontend && npm install

    - name: Bundle frontend code
      run: cd ./frontend && npm run build

    - name: Commit changes if any
      uses: EndBug/add-and-commit@v9
      with:
        add: './frontend/**'
        message: 'Built frontend'
        default_author: github_actions
        push: true

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        architecture: 'x64'

    - name: Install Black 
      run: pip install black

    - name: Format Python code with black 
      run: black ./backend ./frontend --verbose

    - name: Format frontend code with prettier
      run: cd ./frontend && npm run format

    - name: Commit changes if any
      uses: EndBug/add-and-commit@v9
      with:
        add: '*.py'
        message: 'Code formatted'
        default_author: github_actions
        push: true

    - name: Run backend tests with coverage
      run: docker exec -t gat2_backend bash -c "pip install coverage pytest coverage-badge && coverage run --data-file=/backend/backend/tests/.coverage -m pytest"

    - name: Generate coverage badge
      run: docker exec -t gat2_backend bash -c "cd /backend/backend/tests && coverage-badge -f -o coverage.svg"

    - name: Commit changes if any
      uses: EndBug/add-and-commit@v9
      with:
        add: '**/coverage.svg'
        message: 'Coverage badge generated'
        default_author: github_actions
        push: true

    # TODO:
    # Download bundled frontend code into repository
    # Run code black (and later prettifier)
    # Download formatted code into repository

    # Deployment
    # copy code into containers
    # push containers into registry
    # test containers

    - name: Stop containers
      if: always()
      run: docker compose down