/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/api.js":
/*!********************!*\
  !*** ./src/api.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"apiService\": () => (/* binding */ apiService)\n/* harmony export */ });\nvar fetchService = function() {\n\n    let makeFetchRequest = function(httpMethod, url, data=null, formData=null, authorization=true) {\n\n        const options = {\n            method: httpMethod\n        }\n\n        let headers = {};\n        if (authorization) {\n            headers['Authorization'] = 'Bearer ' + localStorage.getItem(\"access_token\")\n        }\n\n        if (data) {\n            options.body = JSON.stringify(data);\n            headers['Content-Type'] = 'application/json';\n        } \n        else if (formData) {\n            options.body = formData;\n        }\n\n        options.headers = new Headers(headers);\n\n        let responsePromise = fetch(url, options);\n\n        return responsePromise;\n    }\n\n    // public API\n    return {\n        makeFetchRequest: makeFetchRequest\n    }\n\n}();\n\n\nvar apiService = function() {\n\n    let apiUrl = API_URL;\n\n    let getProjects = function(skip, limit, orderby, orderdir) {\n        let url = `${apiUrl}/projects/?skip=${skip}&limit=${limit}&orderby=${orderby}&orderdir=${orderdir}`;\n        return fetchService.makeFetchRequest('GET', url, null, null, true);\n    }\n\n    let getProject = function(projectId) {\n        let url = `${apiUrl}/project/${projectId}`;\n        return fetchService.makeFetchRequest('GET', url, null, null, true);\n    }\n\n    let deleteProject = function(projectId) {\n        let url = `${apiUrl}/project/${projectId}`;\n        return fetchService.makeFetchRequest('DELETE', url, null, null, true);\n    }\n\n    let createProject = function(projectData) {\n        let url = `${apiUrl}/projects/`;\n        return fetchService.makeFetchRequest('POST', url, projectData, null, true);\n    }\n\n    let updateProject = function(projectId, projectData) {\n        let url = `${apiUrl}/project/${projectId}`\n        return fetchService.makeFetchRequest('PUT', url, projectData, null, true);\n    }\n\n    let getAnnotationIds = function() {\n        let url = `${apiUrl}/annotation_ids/`;\n        return fetchService.makeFetchRequest('GET', url, null, null, true);\n    }\n\n    let exportProject = function(projectId) {\n        let url = `${apiUrl}/export/${projectId}`;\n        return fetchService.makeFetchRequest('GET', url, null, null, true);\n    }\n\n    let importProject = function(importProjectData) {\n        let url = `${apiUrl}/import/`;\n        return fetchService.makeFetchRequest('POST', url, null, importProjectData, true);\n    }\n\n    let getImages = function(projectId) {\n        let url = `${apiUrl}/project/${projectId}/images/`;\n        return fetchService.makeFetchRequest('GET', url, null, null, true);\n    }\n\n    let getImageFile = function(imageId) {\n        let url = `${apiUrl}/image_file/${imageId}`;\n        return fetchService.makeFetchRequest('GET', url, null, null, true);\n    }\n\n    let createImages = function(projectId, imagesData) {\n        let url = `${apiUrl}/project/${projectId}/images/`;\n        return fetchService.makeFetchRequest('POST', url, null, imagesData, true);\n    }\n\n    let deleteImage = function(imageId) {\n        let url = `${apiUrl}/image/${imageId}`;\n        return fetchService.makeFetchRequest('DELETE', url, null, null, true);\n    }\n\n    let getAnnotation = function(imageId) {\n        let url = `${apiUrl}/annotation/${imageId}`;\n        return fetchService.makeFetchRequest('GET', url, null, null, true);\n    }\n\n    let updateAnnotation = function(imageId, annotationData) {\n        let url = `${apiUrl}/annotation/${imageId}`;\n        return fetchService.makeFetchRequest('PUT', url, annotationData, null, true);\n    }\n\n    let createUser = function(userData) {\n        let url = `${apiUrl}/users/`;\n        return fetchService.makeFetchRequest('POST', url, userData, null, false);\n    }\n\n    let loginUser = function(userData) {\n        let url = `${apiUrl}/token`;\n        return fetchService.makeFetchRequest('POST', url, null, userData, false);\n    }\n\n    let isValid = function(accessToken) {\n        let url = `${apiUrl}/isvalid/${accessToken}`;\n        return fetchService.makeFetchRequest('GET', url, null, null, false);\n    }\n\n    // public API\n    return {\n        getProjects: getProjects,\n        getProject: getProject,\n        deleteProject: deleteProject,\n        createProject: createProject,\n        updateProject: updateProject,\n        getAnnotationIds: getAnnotationIds,\n        exportProject: exportProject,\n        importProject: importProject,\n        getImages: getImages,\n        getImageFile: getImageFile,\n        createImages: createImages,\n        deleteImage: deleteImage,\n        getAnnotation: getAnnotation,\n        updateAnnotation: updateAnnotation,\n        createUser: createUser,\n        loginUser: loginUser,\n        isValid: isValid\n    }\n\n}();\n\n\n\n\n//# sourceURL=webpack://frontend/./src/api.js?");

/***/ }),

/***/ "./src/editor.js":
/*!***********************!*\
  !*** ./src/editor.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"editor\": () => (/* binding */ editor)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"./src/api.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"./src/index.js\");\n\n\n\n\n  // TODO:\n  // - display project info (name, number of images, number of annotated images, last edited, created, description, etc.)\n  const annotation_saved_success_msg = \"Annotation saved.\";\n  const annotation_saved_error_msg = \"Failed to save annotation.\";\n\n  const imagesSelectionList = new mdc.list.MDCList(document.getElementById('images-selection-list'));\n  imagesSelectionList.singleSelection = true;  \n\n  (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.entrypoint)(() => {\n    editor(project_id);\n  });\n\n  async function editor(project_id) {\n    var selected_image = {\"id\": null, \"name\": null};\n    var selected_image_has_changes = false;\n    var existing_anotations = [];\n    var img_width, img_height;\n    var marker_mode = \"auxline\"\n    var img_pos_x, img_pos_y;\n\n    var prev_intersections = [];\n    var auxlines = [];\n    var auxcurves = [];\n    var temp_auxline_pts = [];\n    var temp_auxcurve_pts = [];\n\n    var neighbour_corners;\n    var neighbours_manual_selection = [];\n    var selected_pv_module = \"\";\n    var corners = [];\n    var pv_modules = [];\n\n    document.getElementById(\"export-project-button\").addEventListener('click', _index_js__WEBPACK_IMPORTED_MODULE_1__.exportProjectClicked.bind(null, project_id));\n    document.getElementById(\"setup-project-button\").addEventListener('click', _index_js__WEBPACK_IMPORTED_MODULE_1__.setupProjectClicked.bind(null, project_id));\n\n    async function getImages(project_id) {\n        var response = await _api_js__WEBPACK_IMPORTED_MODULE_0__.apiService.getImages(project_id);\n\n        if (response.status == 200) {\n            const data = await response.json();\n            data.foreach(function(image) {\n              addImageToImagesList(image);\n              const annotated = existing_anotations.includes(image.id);\n              setImageAnnotationStatus(image.id, annotated);\n            });\n        } else if (response.status == 401) {\n            (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.redirectToLogin)();\n        } else {\n            throw new Error(`Failed to get images`);\n        }\n    }\n\n    async function getAnnotation(image_id) {\n        var response = await _api_js__WEBPACK_IMPORTED_MODULE_0__.apiService.getAnnotation(image_id);\n\n        if (response.status == 200) {\n            const data = await response.json();\n            if ('data' in data) {\n              var neededKeys = ['corners', 'grid_cells', 'auxlines', 'auxcurves', 'prev_intersections'];\n              if (neededKeys.every(key => Object.keys(data.data).includes(key))) {\n                  corners = data.data.corners;\n                  pv_modules = data.data.grid_cells;\n                  auxlines = data.data.auxlines;\n                  auxcurves = data.data.auxcurves;\n                  prev_intersections = data.data.prev_intersections;\n                  draw();\n              }\n            }\n        } else if (response.status == 401) {\n            (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.redirectToLogin)();\n        } else {\n            throw new Error(`Failed to get annotation for image with id ${image_id}`);\n        }\n    }\n\n    async function updateAnnotation(image_id, annotation_data) {\n        var response = await _api_js__WEBPACK_IMPORTED_MODULE_0__.apiService.updateAnnotation(image_id, annotation_data);\n\n        if (response.status == 200) {\n          console.log(annotation_saved_success_msg);\n          snackbar.labelText = annotation_saved_success_msg;\n          snackbar.open();\n        } else if (response.status == 401) {\n          (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.redirectToLogin)();\n        } else {\n          console.log(annotation_saved_error_msg);\n          snackbar.labelText = annotation_saved_error_msg;\n          snackbar.open();\n          throw new Error(`Failed to save annotation`);\n        }\n    }\n\n    // helper to remove extension from filename\n    function splitext(filename) {\n      return filename.split('.').slice(0, -1).join('.')\n    }\n\n    function addImageToImagesList(image) {\n        const html_list_item = `\n          <li id=\"images-selection-list-${image.id}\" data-image-id=\"${image.id}\" data-image-name=\"${image.name}\" class=\"mdc-deprecated-list-item\" role=\"option\">\n            <span class=\"mdc-deprecated-list-item__ripple\"></span>\n            <span class=\"mdc-deprecated-list-item__text\">${splitext(image.name).slice(0, 8)}</span>\n            <span class=\"mdc-deprecated-list-item__meta\">\n              <i class=\"material-icons menu-icon\" style=\"color:green; visibility: hidden;\">check</i>\n            </span>\n          </li>`;\n        document.getElementById('images-selection-list').appendChild((0,_index_js__WEBPACK_IMPORTED_MODULE_1__.htmlToElements)(html_list_item));\n    }\n\n    function setImageAnnotationStatus(image_id, annotated) {\n      const listElement = document.getElementById(`images-selection-list-${image_id}`);\n      var icon = listElement.querySelector('.menu-icon');\n      if (annotated) {        \n        icon.style.visibility = \"visible\";\n      } else {\n        icon.style.visibility = \"hidden\";\n      }\n    }\n\n    existing_anotations = await (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.getAnnotationIds)();\n    getImages(project_id);\n\n    // saves annotation data to file\n    function save() {\n      if (selected_image_has_changes) {\n        if (selected_image[\"name\"] != null && (pv_modules.length > 0 || corners.length > 0 ||\n            auxlines.length > 0 || auxcurves.length > 0)) {\n        //if (selected_image[\"name\"] != null) {    // with thisline simply changing the selection will save annotations\n            save_to_json(selected_image[\"id\"]);\n            setImageAnnotationStatus(selected_image[\"id\"], true);\n        }\n        selected_image_has_changes = false;\n      }\n    }\n\n    window.addEventListener('beforeunload', (event) => {\n      event.preventDefault();\n      save();\n      console.log(\"Saved annotation before reload.\");\n    });\n\n    function reset_objects() {\n      temp_auxline_pts = [];\n      temp_auxcurve_pts = [];\n      neighbours_manual_selection = [];\n    }\n\n    var remove_active_tag = function(buttons_drawing) {\n      var btns_other = buttons_drawing.querySelectorAll(\"button\");\n      for (var i = 0; i < btns_other.length; i++) {\n        btns_other[i].classList.remove(\"btn-active\")\n      }\n    };\n\n    function selected_image_changed() {\n      selected_image_has_changes = true;\n    }\n\n    function images_selection_changed(event) {\n      // save annotations of previous image before changing the image\n      save();\n\n      // clear SVG and annotations when changing image\n      svg.selectAll('*').remove();\n      reset_objects();\n      auxlines = [];\n      auxcurves = [];\n      prev_intersections = [];\n      corners = [];\n      pv_modules = [];\n      marker_mode = \"auxline\";\n      selected_pv_module = \"\";\n\n      // when changing image mark the auxline button as active\n      remove_active_tag(buttons_drawing);\n      document.getElementById(\"btn-draw-auxline\").classList.add(\"btn-active\")\n\n      var g_element = svg.append(\"g\")\n          .attr(\"id\", \"g_element\");\n\n      var image_element = svg.select(\"#g_element\")\n          .append('image');\n\n      // set image\n      const selectedListIdx = imagesSelectionList.selectedIndex;\n      selected_image = {\n        id: event.target.children[selectedListIdx].dataset.imageId,\n        name: event.target.children[selectedListIdx].dataset.imageName\n      }\n\n      const image_id = selected_image[\"id\"];\n      (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.getImageUrl)(image_id).then(imageURL => {\n        image_element.attr('href', imageURL);\n      });      \n\n      // image zoom and translation\n      var zoom_handler = d3.zoom()\n        .on(\"zoom\", zoom_actions);\n      function zoom_actions(){\n        g_element.attr(\"transform\", d3.event.transform);\n      }\n      zoom_handler(svg);\n\n      // determine image dimensions\n      var img = new Image();\n      img.onload = function(){\n        img_width = img.width;\n        img_height = img.height;\n        console.log(\"Changed image:\", img.width, img.height);\n\n        // center the image in the svg\n        var svg_width = Number(svg.style(\"width\").replace(\"px\", \"\"));\n        var svg_height = Number(svg.style(\"height\").replace(\"px\", \"\"));\n        var img_offset_x = svg_width/2 - img_width/2;\n        var img_offset_y = svg_height/2 - img_height/2;\n        var initial_transform = d3.zoomIdentity.translate(img_offset_x, img_offset_y);\n        svg.call(zoom_handler.transform, initial_transform);\n      }\n      ;(0,_index_js__WEBPACK_IMPORTED_MODULE_1__.getImageUrl)(image_id).then(imageURL => {\n        img.src = imageURL;\n      });\n\n      // add lines connecting the center cursor with the nearest four corners\n      for (var i = 0; i < 4; i++) {\n      svg.select(\"#g_element\")\n        .append(\"line\")\n          .attr(\"id\", \"center-line-\"+[i])\n          .style(\"stroke\", \"magenta\")\n          .style(\"stroke-dasharray\", (\"2, 2\"))\n          .style(\"stroke-width\", 0.5)\n          .style(\"stroke-opacity\", 0);\n      }\n\n      // maintain previous cursor state when changing to another image\n      svg.select(\"#g_element\")\n        .append(\"g\")\n        .append(\"circle\")\n          .attr(\"id\", \"cursor\")\n          .attr('r', 2)\n          .style(\"fill\", \"magenta\")\n          .style(\"opacity\", 0)\n          .style(\"fill-opacity\", 1)\n          .style(\"stroke\", null);\n\n      // we need these two groups to maintain a consistent z ordering of corners and modules\n      svg.select(\"#g_element\")\n        .append(\"g\")\n          .attr(\"id\", \"g_auxobjects\");\n      svg.select(\"#g_element\")\n        .append(\"g\")\n          .attr(\"id\", \"g_pv_modules\");\n      svg.select(\"#g_element\")\n        .append(\"g\")\n          .attr(\"id\", \"g_corners\");\n\n      // check if annotation exist for the selected image and load it\n      if (selected_image[\"id\"] !== null) {\n        getAnnotation(selected_image[\"id\"]);\n      }\n    }\n    document.getElementById('images-selection-list').addEventListener(\"MDCList:selectionChange\", images_selection_changed);\n\n    var svg = d3.select('svg');\n\n    // parse translation and scale from the image transform\n    function getTranslationScale(g_element) {\n      var matrix = g_element.transform.baseVal.consolidate().matrix;\n      var img_offset_x = matrix.e;\n      var img_offset_y = matrix.f;\n      var img_scale = matrix.d;\n      return [img_offset_x, img_offset_y, img_scale];\n    }\n\n    // get the current position of the cursor in the image coordinate system\n    svg.on(\"mousemove\", function () {\n        var mouse = d3.mouse(this);  // acces mouse position via mouse[0], mouse[1]\n        if (!d3.select(\"#g_element\").empty()) {\n          var [img_offset_x, img_offset_y, img_scale] = getTranslationScale(g_element);\n\n          // transform mouse cooridnates to image coordinates\n          img_pos_x = (mouse[0] - img_offset_x) / img_scale\n          img_pos_y = (mouse[1] - img_offset_y) / img_scale\n\n          // draw cursor\n          svg.select(\"#cursor\")\n            .attr(\"cx\", img_pos_x)\n            .attr('cy', img_pos_y);\n\n          // make center connection lines invisible\n          for (var i = 0; i < 4; i++) {\n            svg.select(\"#center-line-\"+[i])\n              .style(\"stroke-opacity\", 0);\n          }\n\n          // find four nearest neighbouring corners when in center mode\n          var findKNearest = function(point, corners, k) {\n            var distances = [];\n            for (var i = 0; i < corners.length; i++) {\n              var dist = Math.pow((corners[i].x - point.x), 2) + Math.pow((corners[i].y - point.y), 2);\n              distances.push({'dist': dist, 'corner': corners[i]});\n            }\n            var distances_sorted = distances.sort(function(a, b) { return a.dist > b.dist ? 1 : -1});\n            var neighbours = distances_sorted.slice(0, k);\n            return neighbours;\n          }\n\n          // find neighbours and draw lines connecting the center cursor with the corners\n          if (corners.length > 0 && marker_mode == \"center\") {\n            neighbour_corners = findKNearest({x: img_pos_x, y: img_pos_y}, corners, 4);\n            // draw supporting geometry for center point placement\n            for (var i = 0; i < neighbour_corners.length; i++) {\n              svg.select(\"#center-line-\"+[i])\n                .attr(\"x1\", img_pos_x)\n                .attr(\"y1\", img_pos_y)\n                .attr(\"x2\", neighbour_corners[i].corner.x)\n                .attr(\"y2\", neighbour_corners[i].corner.y)\n                .style(\"stroke-opacity\", 1);\n            }\n          }\n        }\n    });\n\n    // show cursor when entering the svg\n    svg.on(\"mouseover\", function () {\n      svg.select(\"#cursor\").style(\"opacity\", 1);\n      // make center connection lines visible\n      if (marker_mode == \"center\") {\n        for (var i = 0; i < 4; i++) {\n          svg.select(\"#center-line-\"+[i])\n            .style(\"stroke-opacity\", 1);\n        }\n      }\n    });\n\n    // hide cursor when leaving the SVG\n    svg.on(\"mouseout\", function () {\n      svg.select(\"#cursor\").style(\"opacity\", 0);\n      // make center connection lines invisible\n      if (marker_mode == \"center\") {\n        for (var i = 0; i < 4; i++) {\n          svg.select(\"#center-line-\"+[i])\n            .style(\"stroke-opacity\", 0);\n        }\n      }\n    });\n\n    // handle click of drawing mode button actions\n    var buttons_drawing = document.getElementById('drawing-actions');\n    var button_drawing_click = function(e) {\n      remove_active_tag(buttons_drawing);\n      reset_objects();\n      selected_pv_module = \"\";\n      draw();\n      var btn = e.target;\n      if (btn.id == 'btn-add-corner') {\n        marker_mode = \"corner\";\n        btn.classList.add(\"btn-active\");\n        // change cursor\n        svg.select(\"#cursor\")\n          .style(\"fill\", \"magenta\")\n          .style(\"fill-opacity\", 1)\n          .style(\"stroke\", null);\n        console.log(\"Switched to corner mode\");\n      } else if (btn.id == 'btn-create-module') {\n        marker_mode = \"center\";\n        btn.classList.add(\"btn-active\");\n        svg.select(\"#cursor\")\n          .style(\"fill\", \"black\")\n          .style(\"fill-opacity\", 1)\n          .style(\"stroke\", null);\n        console.log(\"Switched to center mode\");\n      } else if (btn.id == 'btn-create-module-manual') {\n        marker_mode = \"center_manual\";\n        btn.classList.add(\"btn-active\");\n        svg.select(\"#cursor\")\n          .style(\"fill-opacity\", 0)\n          .style(\"stroke\", null);\n        console.log(\"Switched to center mode (manual)\");\n      } else if (btn.id == 'btn-erase') {\n        marker_mode = \"erase\";\n        btn.classList.add(\"btn-active\");\n        svg.select(\"#cursor\")\n          .style(\"fill\", null)\n          .style(\"fill-opacity\", 0)\n          .style(\"stroke\", \"red\")\n          .style(\"stroke-width\", 0.5);\n        console.log(\"Switched to erase mode\");\n      } else if (btn.id == 'btn-draw-auxline') {\n        marker_mode = \"auxline\";\n        btn.classList.add(\"btn-active\");\n        svg.select(\"#cursor\")\n          .style(\"fill\", \"magenta\")\n          .style(\"fill-opacity\", 1)\n          .style(\"stroke\", null);\n        console.log(\"Switched to auxline mode\");\n      } else if (btn.id == 'btn-draw-auxcurve') {\n        marker_mode = \"auxcurve\";\n        btn.classList.add(\"btn-active\");\n        svg.select(\"#cursor\")\n          .style(\"fill\", \"magenta\")\n          .style(\"fill-opacity\", 1)\n          .style(\"stroke\", null);\n        console.log(\"Switched to auxcurve mode\");\n      } else if (btn.id == 'btn-get-intersects') {\n        marker_mode = null;\n        svg.select(\"#cursor\")\n          .style(\"fill-opacity\", 0)\n          .style(\"stroke\", null);\n        compute_intersections(prev_intersections);\n        selected_image_changed();\n        draw();\n        console.log(\"Computed new corners as intersections of auxiliary lines.\");\n      } else if (btn.id == 'btn-mark-module-partially-visible') {\n        marker_mode = \"mark_module_partially_visible\";\n        btn.classList.add(\"btn-active\");\n        svg.select(\"#cursor\")\n          .style(\"fill-opacity\", 0)\n          .style(\"stroke\", null);\n      }\n    };\n    buttons_drawing.addEventListener('click', button_drawing_click, false);\n\n    // place a new marker when clicking\n    svg.on(\"click\", function () {\n      if (marker_mode == \"corner\") {\n        corners.push({x: img_pos_x, y: img_pos_y, id: (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.uuidv4)()});\n        console.log(\"Placed a new corner marker at (\", img_pos_x, \",\", img_pos_y, \")\");\n        selected_image_changed();\n        draw();\n      }\n      else if (marker_mode == \"center\") {\n        if (corners.length < 4) {\n          alert(\"Before you can create a grid cell you need to place at least four corner markers first.\");\n        } else {\n          // sort neighbouring corners ccw\n          var neighbours = [];\n          for (var i = 0; i < neighbour_corners.length; i++) {\n            neighbours.push(neighbour_corners[i].corner);\n          }\n          neighbours = order_corners_ccw(neighbours);\n          var center_point = compute_center_point(neighbours);\n          // store the new pv module\n          pv_modules.push({\"corners\": neighbours, \"center\": center_point, \"id\": (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.uuidv4)(), \"truncated\": false});\n          console.log(\"Placed a new grid cell at (\", center_point.x, \",\", center_point.y, \")\");\n          selected_image_changed();\n          draw();          \n        }\n      }\n      else if (marker_mode == \"auxline\") {\n        temp_auxline_pts.push({x: img_pos_x, y: img_pos_y});\n        if (temp_auxline_pts.length == 2) {\n          auxlines.push({\n            x1: temp_auxline_pts[0].x,\n            y1: temp_auxline_pts[0].y,\n            x2: temp_auxline_pts[1].x,\n            y2: temp_auxline_pts[1].y,\n            id: (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.uuidv4)()\n          });\n          console.log(\"Placed auxiliary line from (\", temp_auxline_pts[0].x, \",\",\n            temp_auxline_pts[0].y, \") to (\", temp_auxline_pts[1].x, \",\", temp_auxline_pts[1].y, \")\");\n          temp_auxline_pts = [];\n          selected_image_changed();\n          draw();\n        }\n      }\n      else if (marker_mode == \"auxcurve\") {\n        temp_auxcurve_pts.push([img_pos_x, img_pos_y]);\n        if (temp_auxcurve_pts.length == 3) {\n          auxcurves.push({points: temp_auxcurve_pts, id: (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.uuidv4)()});\n          temp_auxcurve_pts = [];\n          console.log(\"Placed auxiliary curve\");\n          selected_image_changed();\n          draw();\n        }\n      }\n    });\n    // sorts four corners into [tr, tl, bl, br] order\n    var order_corners_ccw = function(corners) {\n      var corners_sorted = corners.sort(function(a, b) { return a.x > b.x ? 1 : -1});\n      var corners_left = corners_sorted.slice(0, 2);\n      var corners_right = corners_sorted.slice(2, 4);\n      var corners_left_sorted = corners_left.sort(function(a, b) { return a.y > b.y ? 1 : -1});\n      var tl = corners_left_sorted[0];\n      var bl = corners_left_sorted[1];\n      var corners_right_sorted = corners_right.sort(function(a, b) { return a.y > b.y ? 1 : -1});\n      var tr = corners_right_sorted[0];\n      var br = corners_right_sorted[1];\n      return [tr, tl, bl, br];\n    };\n    // computes the center point given four corner points\n    var compute_center_point = function(corners) {\n      var center_point = {x: 0, y: 0};\n      for (var i = 0; i < corners.length; i++) {\n        center_point.x += corners[i].x;\n        center_point.y += corners[i].y;\n      }\n      center_point.x /= corners.length;\n      center_point.y /= corners.length;\n      return center_point;\n    };\n\n    // find all pairwise intersections between auxiliary lines and curves\n    function compute_intersections() {\n      // find all intersections between two paths\n      function intersect_paths(path0, path1) {\n        function remove_duplicates(points) {\n          return points.filter((a, b) => points.indexOf(a) === b);\n        }\n        var intersects = [];\n        var overlays = Intersection.intersectShapes(path0, path1);\n        for (i in overlays.points) {\n          if (overlays.points[i].constructor.name == \"Vector2D\" || overlays.points[i].constructor.name == \"Point2D\") {\n          intersects.push({x: overlays.points[i].x, y: overlays.points[i].y});\n          }\n        }\n        if (typeof intersects !== 'undefined') {\n          return remove_duplicates(intersects);\n        }\n        else {\n          return [];\n        }\n      }\n\n      // determine which intersections were added, removed and kept from previous intersections\n      function get_diff(prev_intersects, intersects) {\n        var added = [], removed = [], kept = [];\n        for (var i = 0; i < intersects.length; i++) {\n          if (prev_intersects.some(function(d) { return d.x == intersects[i].x && d.y == intersects[i].y } )) {\n            kept.push(intersects[i]);\n          } else {\n            added.push(intersects[i]);\n          }\n        }\n        for (var i = 0; i < prev_intersects.length; i++) {\n          if (!intersects.some(function(d) { return d.x == prev_intersects[i].x && d.y == prev_intersects[i].y } )) {\n            removed.push(prev_intersects[i]);\n          }\n        }\n        return [added, removed, kept];\n      }\n\n      var intersections = [];\n      for(var k = 0; k < auxlines.length+auxcurves.length; k++) {\n        for (var l = k + 1; l < auxlines.length+auxcurves.length; l++) {\n          var aux_obj = [\n            svg.selectAll(\".auxobj\").nodes()[k],\n            svg.selectAll(\".auxobj\").nodes()[l]\n          ]\n\n          // create path objects (Line/Path) depending on whether the element is a line or curve\n          var path = [];\n          for (var i = 0; i < 2; i++) {\n            if (aux_obj[i].classList.contains(\"auxline\")) {\n              path.push(new Line(aux_obj[i]));\n            } else if (aux_obj[i].classList.contains(\"auxcurve\")) {\n              path.push(new Path(aux_obj[i]));\n            }\n          }\n          // commpute intersection between path objects\n          var intersects = intersect_paths(path[0], path[1]);\n          intersections.push(...intersects);\n        }\n      }\n\n      // find out which intersections have been added, kept or removed\n      var [added, removed, kept] = get_diff(prev_intersections, intersections);\n      prev_intersections = [...intersections];\n\n      // add corners corresponding to the added intersections\n      for (var i = 0; i < added.length; i++) {\n        corners.push({x: added[i].x, y: added[i].y, id: (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.uuidv4)()});\n      }\n      // remove corners and all pv modules containing the corner\n      for (var k = corners.length-1; k >= 0; k--) {\n        if (removed.some(function(d) { return d.x == corners[k].x && d.y == corners[k].y })) {\n          // if corner is part of a pv_module, delete the entire module\n          var del_idx = [];\n          for (var i = 0; i < pv_modules.length; i++) {\n            for(var j = 0; j < pv_modules[i].corners.length; j++) {\n              if (pv_modules[i].corners[j].id == corners[k].id) {\n                del_idx.push(i);\n              }\n            }\n          }\n          for (var i = del_idx.length-1; i >= 0; i--) {\n            console.log(\"Deleting grid cell \" + pv_modules[i].id + \"(it contained deleted point \" + corners[k].id + \")\");\n            pv_modules.splice(del_idx[i], 1);\n          }\n          corners.splice(k, 1);\n        }\n      }\n    }\n\n    // manual creation of pv modules (by clicking 4 corners)\n    function corner_mouseclick_handler(d) {\n      console.log(\"corner_mouseclick_handler\");\n      if (marker_mode == \"center_manual\") {\n        if (corners.length < 4) {\n          alert(\"Before you can create a grid cell you need to place at least four corner markers first.\");\n        } else {\n          neighbours_manual_selection.push(d)\n          if (neighbours_manual_selection.length == 4) {\n            neighbours_manual_selection = order_corners_ccw(neighbours_manual_selection);\n            var center_point = compute_center_point(neighbours_manual_selection);\n            // store the new pv module\n            pv_modules.push({\"corners\": neighbours_manual_selection, \"center\": center_point, \"id\": (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.uuidv4)(), \"truncated\": false});\n            console.log(\"Placed a new grid cell at (\", center_point.x, \",\", center_point.y, \")\");\n            neighbours_manual_selection = [];\n            selected_image_changed();\n            draw();\n          }\n        }\n\n      }\n    }\n\n    // dragging of corner points\n    function dragstarted(d) {\n      d3.select(this).raise();\n      svg.select(\"#g_element\").attr(\"cursor\", \"grabbing\");\n    }\n    function dragended(d) {\n      svg.select(\"#g_element\").attr(\"cursor\", \"default\");\n    }\n    function dragged(d) {\n      // update corner position\n      d3.select(this).attr(\"cx\", d.x = d3.event.x).attr(\"cy\", d.y = d3.event.y);\n      // update center position and corner position of all pv modules which contain the marker\n      for (var i = 0; i < pv_modules.length; i++) {\n        for (var j = 0; j < pv_modules[i].corners.length; j++) {\n          if (pv_modules[i].corners[j].id == d.id) {\n            pv_modules[i].corners[j] = d;\n            pv_modules[i].center = compute_center_point(pv_modules[i].corners);\n          }\n        }\n      }\n      selected_image_changed();\n      draw();\n    }\n\n    // draging of auxline endpoints\n    function auxline_dragged(d) {\n      // update line coordinates\n      if (this.classList.contains(\"auxline-startpoint\")) {\n        d3.select(this.parentNode).select(\"line\")\n          .attr(\"x1\", d.x1 = d3.event.x)\n          .attr(\"y1\", d.y1 = d3.event.y);\n      } else if (this.classList.contains(\"auxline-endpoint\")) {\n        d3.select(this.parentNode).select(\"line\")\n          .attr(\"x2\", d.x2 = d3.event.x)\n          .attr(\"y2\", d.y2 = d3.event.y);\n      }\n      // update line endpoint\n      d3.select(this).attr(\"cx\", d.cx = d3.event.x).attr(\"cy\", d.cy = d3.event.y);\n      selected_image_changed();\n      draw();\n    }\n\n    // computes auxcurve path from three control points\n    function generate_auxcurve_data(curve_points) {\n      var line_generator = d3.line()\n        .curve(d3.curveCatmullRom.alpha(1));\n      var path_data = line_generator(curve_points);\n      return path_data;\n    }\n\n    // draging of auxcurve endpoints\n    function auxcurve_dragged(d) {\n      // update curve points\n      var element_id = d3.select(this.parentNode).attr(\"id\");\n      for (var i = 0; i < auxcurves.length; i++) {\n        if (auxcurves[i].id == element_id) {\n          if (this.classList.contains(\"auxcurve-startpoint\")) {\n            auxcurves[i].points[0][0] = d3.event.x;\n            auxcurves[i].points[0][1] = d3.event.y;\n          } else if (this.classList.contains(\"auxcurve-middlepoint\")) {\n            auxcurves[i].points[1][0] = d3.event.x;\n            auxcurves[i].points[1][1] = d3.event.y;\n          } else if (this.classList.contains(\"auxcurve-endpoint\")) {\n            auxcurves[i].points[2][0] = d3.event.x;\n            auxcurves[i].points[2][1] = d3.event.y;\n          }\n          d3.select(this.parentNode).select(\"path\").attr(\"d\", generate_auxcurve_data(auxcurves[i].points));\n        }\n      }\n      // update line point\n      d3.select(this).attr(\"cx\", d3.event.x).attr(\"cy\", d3.event.y);\n      selected_image_changed();\n      draw();\n    }\n\n    // delete objects in erase mode\n    var erase_mousedown_handler = function(d) {\n      function erase_corner_marker(element) {\n        d3.select(element).on('mousedown.drag', null);  // remove drag handler before deleting element\n        var element_id = d3.select(element).attr(\"id\");\n        // search and remove element from the corners array\n        for (var i = corners.length-1; i >= 0; i--) {\n          if (corners[i].id == element_id) {\n            // before deleting corner remove it from the previous intersections array\n            for (var j = prev_intersections.length-1; j >= 0; j--) {\n              if (prev_intersections[j].x == corners[i].x && prev_intersections[j].y == corners[i].y) {\n                  prev_intersections.splice(j, 1);\n              }\n            }\n            // delete corner\n            console.log(\"Deleting corner \" + element_id);\n            corners.splice(i, 1);\n          }\n        }\n        // if corner is part of a pv_module, delete the entire module\n        var del_idx = [];\n        for (var i = 0; i < pv_modules.length; i++) {\n          for(var j = 0; j < pv_modules[i].corners.length; j++)\n          {\n            if (pv_modules[i].corners[j].id == element_id) {\n              del_idx.push(i);\n            }\n          }\n        }\n        for (var i = del_idx.length-1; i >= 0; i--) {\n          console.log(\"Deleting grid cell \" + pv_modules[i].id + \"(it contained deleted point \" + element_id + \")\");\n          pv_modules.splice(del_idx[i], 1);\n        }\n      }\n\n      function erase_auxline(element) {\n        //d3.select(element).on('mousedown.drag', null);\n        var element_id = d3.select(element.parentNode).attr(\"id\");\n        for (var i = auxlines.length-1; i >= 0; i--) {\n          if (auxlines[i].id == element_id) {\n            console.log(\"Deleting auxline \" + element_id);\n            auxlines.splice(i, 1);\n          }\n        }\n      }\n\n      function erase_auxcurve(element) {\n        var element_id = d3.select(element.parentNode).attr(\"id\");\n        for (var i = auxcurves.length-1; i >= 0; i--) {\n          if (auxcurves[i].id == element_id) {\n            console.log(\"Deleting auxcurve \" + element_id);\n            auxcurves.splice(i, 1);\n          }\n        }\n      }\n\n      if (marker_mode == \"erase\") {\n        if (this.classList.contains(\"corner_marker\")) {\n          erase_corner_marker(this);\n        } else if (this.classList.contains(\"auxline-erase\")) {\n          erase_auxline(this);\n        } else if (this.classList.contains(\"auxcurve-erase\")) {\n          erase_auxcurve(this);\n        }\n        selected_image_changed();\n        draw();\n      }\n    };\n\n    // selection of PV module with mouse\n    var mark_module_partially_visible_handler = function(d) {\n      if (marker_mode == \"mark_module_partially_visible\") {\n        selected_pv_module = d.id;\n        for (var i = 0; i < pv_modules.length; i++) {\n          if (pv_modules[i][\"id\"] == selected_pv_module) {\n            var truncated = pv_modules[i][\"truncated\"];\n            pv_modules[i][\"truncated\"] = !truncated;\n          }\n        }\n        selected_image_changed();\n        draw();\n        save();\n      }\n    };\n\n    var draw = function() {\n      // auxiliary lines\n      var svg_auxlines = svg.select(\"#g_auxobjects\")\n        .selectAll(\".auxline\")\n        .data(auxlines, d => d[\"id\"]);\n      var svg_auxlines_enter = svg_auxlines.enter().append(\"g\")\n        .attr(\"id\", function (d) { return d.id });\n      svg_auxlines_enter.append(\"line\")\n        .attr(\"class\", \"auxobj auxline auxline-erase\")\n        .attr(\"x1\", function (d) { return d.x1 })\n        .attr(\"y1\", function (d) { return d.y1 })\n        .attr(\"x2\", function (d) { return d.x2 })\n        .attr(\"y2\", function (d) { return d.y2 })\n        .style(\"stroke\", \"magenta\")\n        .style(\"stroke-opacity\", 0.5)\n        .style(\"stroke-width\", 1)\n        .on(\"mousedown\", erase_mousedown_handler);\n      svg_auxlines_enter.append(\"circle\")\n        .attr(\"class\", \"auxline-startpoint auxline-erase\")\n        .attr(\"cx\", function (d) { return d.x1 })\n        .attr(\"cy\", function (d) { return d.y1 })\n        .style(\"r\", 1.5)\n        .style(\"fill\", \"magenta\")\n        .on(\"mousedown\", erase_mousedown_handler)\n        .call(d3.drag()\n          .on(\"drag\", auxline_dragged));\n      svg_auxlines_enter.append(\"circle\")\n        .attr(\"class\", \"auxline-endpoint auxline-erase\")\n        .attr(\"cx\", function (d) { return d.x2 })\n        .attr(\"cy\", function (d) { return d.y2 })\n        .style(\"r\", 1.5)\n        .style(\"fill\", \"magenta\")\n        .on(\"mousedown\", erase_mousedown_handler)\n        .call(d3.drag()\n          .on(\"drag\", auxline_dragged));\n      var svg_auxlines_merged = svg_auxlines_enter.merge(svg_auxlines);\n      var svg_auxlines_exit = svg_auxlines.exit().each(function() { d3.select(this.parentNode).remove(); });\n\n      // auxiliary curves\n      var svg_auxcurves = svg.select(\"#g_auxobjects\")\n        .selectAll(\".auxcurve\")\n        .data(auxcurves, d => d[\"id\"]);\n      var svg_auxcurves_enter = svg_auxcurves.enter().append(\"g\")\n        .attr(\"id\", function (d) { return d.id });\n      svg_auxcurves_enter.append(\"path\")\n        .attr(\"class\", \"auxobj auxcurve auxcurve-erase\")\n        .attr(\"d\", function (d) { return generate_auxcurve_data(d.points) })\n        .style(\"stroke\", \"magenta\")\n        .style(\"fill\", \"none\")\n        .style(\"stroke-width\", 1)\n        .style(\"stroke-opacity\", 0.5)\n        .on(\"mousedown\", erase_mousedown_handler);\n      svg_auxcurves_enter.append(\"circle\")\n        .attr(\"class\", \"auxcurve-startpoint auxcurve-erase\")\n        .attr(\"cx\", function (d) { return d.points[0][0] })\n        .attr(\"cy\", function (d) { return d.points[0][1] })\n        .style(\"r\", 1.5)\n        .style(\"fill\", \"magenta\")\n        .on(\"mousedown\", erase_mousedown_handler)\n        .call(d3.drag()\n          .on(\"drag\", auxcurve_dragged));\n      svg_auxcurves_enter.append(\"circle\")\n        .attr(\"class\", \"auxcurve-middlepoint auxcurve-erase\")\n        .attr(\"cx\", function (d) { return d.points[1][0] })\n        .attr(\"cy\", function (d) { return d.points[1][1] })\n        .style(\"r\", 1.5)\n        .style(\"fill\", \"magenta\")\n        .on(\"mousedown\", erase_mousedown_handler)\n        .call(d3.drag()\n          .on(\"drag\", auxcurve_dragged));\n      svg_auxcurves_enter.append(\"circle\")\n        .attr(\"class\", \"auxcurve-endpoint auxcurve-erase\")\n        .attr(\"cx\", function (d) { return d.points[2][0] })\n        .attr(\"cy\", function (d) { return d.points[2][1] })\n        .style(\"r\", 1.5)\n        .style(\"fill\", \"magenta\")\n        .on(\"mousedown\", erase_mousedown_handler)\n        .call(d3.drag()\n          .on(\"drag\", auxcurve_dragged));\n      var svg_auxcurves_merged = svg_auxcurves_enter.merge(svg_auxcurves);\n      var svg_auxcurves_exit = svg_auxcurves.exit().each(function() { d3.select(this.parentNode).remove(); });\n\n      // corner markers\n      svg.select(\"#g_corners\")\n          .selectAll(\".corner_marker\")\n          .data(corners)\n          .join(\"circle\")\n            .attr(\"class\", \"corner_marker\")\n            .attr('id', function (d) { return d.id; })\n            .attr('cx', function (d) { return d.x; })\n            .attr('cy', function (d) { return d.y; })\n            .attr('r', 2)\n            .attr(\"fill\", \"magenta\")\n            .on(\"mousedown.1\", erase_mousedown_handler)\n            .on(\"mousedown.2\", corner_mouseclick_handler)\n            .call(d3.drag()\n              .on(\"start\", dragstarted)\n              .on(\"drag\", dragged)\n              .on(\"end\", dragended));\n\n      // pv modules\n      svg.select(\"#g_pv_modules\")\n        .selectAll(\".pv_module\")\n        .data(pv_modules)\n        .join(\"polygon\")\n          .attr(\"class\", \"pv_module\")\n          .attr(\"id\", function (d) { return d.id; })\n          .attr(\"points\", function (d) {\n            return d.corners.map(function (d) { return [d.x, d.y].join(\",\"); }).join(\" \"); })\n          .style(\"fill\", function (d) { if(d.truncated) {return \"yellow\"} else {return \"lawngreen\"}; })\n          .style(\"fill-opacity\", 0.5)\n          .style(\"stroke\", function (d) { if(d.truncated) {return \"yellow\"} else {return \"lawngreen\"}; })\n          .style(\"stroke-width\", 0.5)\n          .on(\"mousedown\", erase_mousedown_handler)\n          .on(\"click\", mark_module_partially_visible_handler);\n\n      // center markers\n      svg.select(\"#g_pv_modules\")\n        .selectAll(\".pv_module_center\")\n        .data(pv_modules)\n        .join(\"circle\")\n          .attr(\"class\", \"pv_module_center\")\n          .attr('cx', function (d) { return d.center.x })\n          .attr('cy', function (d) { return d.center.y })\n          .attr('r', 2)\n          .attr(\"fill\", \"black\");\n    }\n\n    // save annotations to JSON when changing the image\n    async function save_to_json(image_id) {\n      var annotation_data = {\n          \"data\": {\n            \"image\": selected_image[\"name\"],\n            \"grid_cells\": pv_modules,\n            \"corners\": corners,\n            \"auxlines\": auxlines,\n            \"auxcurves\": auxcurves,\n            \"prev_intersections\": prev_intersections\n          }\n      };\n\n      await updateAnnotation(image_id, annotation_data);\n    }\n  }\n\n  \n\n//# sourceURL=webpack://frontend/./src/editor.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"entrypoint\": () => (/* binding */ entrypoint),\n/* harmony export */   \"exportProjectClicked\": () => (/* binding */ exportProjectClicked),\n/* harmony export */   \"getAnnotationIds\": () => (/* binding */ getAnnotationIds),\n/* harmony export */   \"getImageUrl\": () => (/* binding */ getImageUrl),\n/* harmony export */   \"htmlToElements\": () => (/* binding */ htmlToElements),\n/* harmony export */   \"parseValidationErrors\": () => (/* binding */ parseValidationErrors),\n/* harmony export */   \"redirectToLogin\": () => (/* binding */ redirectToLogin),\n/* harmony export */   \"redirectToProjects\": () => (/* binding */ redirectToProjects),\n/* harmony export */   \"setupProjectClicked\": () => (/* binding */ setupProjectClicked),\n/* harmony export */   \"uuidv4\": () => (/* binding */ uuidv4)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"./src/api.js\");\n\n\n\nasync function getAnnotationIds() { // async function getAnnotationIds() leads to weird error because it overwrites above definition\n    var response = await _api_js__WEBPACK_IMPORTED_MODULE_0__.apiService.getAnnotationIds();\n\n    if (response.status == 200) {\n        const existing_anotations = await response.json();\n        return existing_anotations;\n    } else if (response.status == 401) {\n        redirectToLogin();\n    } else {\n        throw new Error(`Failed to get annotation ids`);\n    }\n}\n\nconst snackbar = new mdc.snackbar.MDCSnackbar(document.querySelector('.mdc-snackbar'));\n\nasync function entrypoint(entrypointFunc) {\n    const loggedIn = await userIsLoggedIn();\n    if (!loggedIn) {\n        redirectToLogin();\n    }\n    else {\n        entrypointFunc();\n    }\n}\n\nasync function userIsLoggedIn() {\n    const access_token = localStorage.getItem('access_token');\n    if (!access_token) {\n        return false;\n    }\n\n    // check if access token is not expired yet\n    var response = await _api_js__WEBPACK_IMPORTED_MODULE_0__.apiService.isValid(access_token);\n    // check if access token is not expired yet\n    if (response.status == 200) {\n        const status = await response.json();\n        return status.isvalid;\n    } else {\n        throw new Error(\"Failed to determine whether user is logged in\");\n    }\n}\n    \nfunction redirectToLogin() {\n    window.location.href = FRONTEND_URLS.login;\n}\n\nasync function loginButtonClicked() {\n    const loggedIn = await userIsLoggedIn();\n    if (loggedIn) {\n    logout();\n    } else {\n    redirectToLogin();\n    }\n}\n\nsetLoginButton();\n\nasync function setLoginButton() {\n    const login_button_label = document.getElementById(\"login-button-label\");\n    const login_button_icon = document.getElementById(\"login-button-icon\");\n    const loggedIn = await userIsLoggedIn();\n    if (loggedIn) {\n    console.log(\"setting button\")\n    login_button_label.innerHTML = \"Sign out\";\n    login_button_icon.innerHTML = \"logout\";\n    } else {\n    login_button_label.innerHTML = \"Login\";\n    login_button_icon.innerHTML = \"login\";\n    }\n}\n\nfunction logout() {\n    localStorage.removeItem('access_token');\n    console.log(\"Logged out\");\n    redirectToLogin();\n}\n\n// UUID creation, taken from: https://stackoverflow.com/a/2117523\nfunction uuidv4() {\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n}\n\nfunction htmlToElements(html) {\n    var template = document.createElement('template');\n    template.innerHTML = html;\n    return template.content;\n}\n\nfunction redirectToProjects() {\n    window.location.href = FRONTEND_URLS.projects;\n}\n\nfunction homeButtonClicked() {\n    redirectToProjects();\n}\n\nfunction parseValidationErrors(textFields, errors) {\n    errors[\"detail\"].forEach((error) => {\n        const fieldname = error.loc[1];\n        console.log(fieldname);\n        textFields[fieldname].helperTextContent = error.msg;\n        textFields[fieldname].valid = false;                \n    });\n}\n\nasync function setupProjectClicked(project_id) {\n  const url = FRONTEND_URLS.getEditProjectUrl+\"?project_id=\"+project_id;\n  const options = {\n      method: 'GET',\n      headers: new Headers({\n          'Authorization': 'Bearer ' + localStorage.getItem(\"access_token\")\n      })\n  }\n\n  let response = await fetch(url, options);\n\n  if (response.status == 200) {\n      const data = await response.json();\n      window.location.href = data.url;\n  } else if (response.status == 401) {\n      redirectToLogin();\n  } else {\n      throw new Error(`Failed to get url for setting up project with id ${project_id}`);\n  }\n}\n\nasync function exportProjectClicked(project_id) {\n    var response = await _api_js__WEBPACK_IMPORTED_MODULE_0__.apiService.exportProject(project_id);\n\n    if (response.status == 200) {\n        // get filename\n        const disposition = response.headers.get('Content-Disposition');\n        filename = disposition.split(/;(.+)/)[1].split(/=(.+)/)[1];\n        if (filename.toLowerCase().startsWith(\"utf-8''\")) {\n            filename = decodeURIComponent(filename.replace(\"utf-8''\", ''));\n        } else {\n            filename = filename.replace(/['\"]/g, '');\n        }\n        // get data\n        const fileBlob = await response.blob();\n        // download file\n        var a = document.createElement('a');\n        a.href = URL.createObjectURL(fileBlob);\n        a.download = filename;\n        document.body.appendChild(a); // append the element to the dom, otherwise it won't work in Firefox\n        a.click();\n        a.remove();\n    } else if (response.status == 401) {\n        redirectToLogin();\n    } else {\n        throw new Error(`Failed to export project with id ${project_id}`);\n    }\n}\n\nasync function getImageUrl(image_id) {\n    var response = await _api_js__WEBPACK_IMPORTED_MODULE_0__.apiService.getImageFile(image_id);\n\n    if (response.status == 200) {\n        const imageBlob = await response.blob();\n        const imageURL = URL.createObjectURL(imageBlob);\n        return imageURL;\n    } else if (response.status == 401) {\n        redirectToLogin();\n    } else {\n        throw new Error(`Failed to get image file with id ${image_id}`);\n    }\n}\n\nconst iconButtonRipples = [].map.call(document.querySelectorAll('.app-bar-icon-button'), function(element) {\n    const ripple = new mdc.ripple.MDCRipple(element);\n    ripple.unbounded = true;\n    return ripple;\n});\n\nconst textfields = [].map.call(document.querySelectorAll('.mdc-text-field'), function(element) {\n    return new mdc.textField.MDCTextField(element);\n});\n\nconst tooltips = [].map.call(document.querySelectorAll('.mdc-tooltip'), function(element) {\n    const tooltip = new mdc.tooltip.MDCTooltip(element);\n    tooltip.setShowDelay(500);\n    tooltip.setHideDelay(0);\n    return tooltip;\n});\n\n\n\n//# sourceURL=webpack://frontend/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/editor.js");
/******/ 	
/******/ })()
;